const { User } = require('./models');
const { TEXTS, NETWORKS, ADMIN_USERNAME } = require('./config');

module.exports = (bot) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ TxID
    const isValidTxId = (txId) => /^[0-9a-fA-F]{64}$/.test(txId);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ BNB –∞–¥—Ä–µ—Å–∞
    const isValidBnbAddress = (address) => /^0x[a-fA-F0-9]{40}$/.test(address);

    const getReferralLink = async (userId) => {
        const botInfo = await bot.getMe();
        return `https://t.me/${botInfo.username}?start=ref${userId}`;
    };
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start(?: ref(\d+))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const referrerId = match[1] ? parseInt(match[1]) : null;

        try {
            let user = await User.findOneAndUpdate(
                { telegramId: userId },
                { $setOnInsert: { telegramId: userId, language: 'ru' } },
                { upsert: true, new: true }
            );

            if (referrerId && referrerId !== userId) {
                await User.updateOne(
                    { telegramId: referrerId },
                    { $addToSet: { referrals: userId }, $inc: { points: 1 } }
                );
            }

            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:", {
                reply_markup: {
                    keyboard: [
                        [{ text: "üá∑üá∫ –†—É—Å—Å–∫–∏–π" }, { text: "üá∫üáø O'zbekcha" }]
                    ],
                    resize_keyboard: true
                }
            });
        } catch (error) {
            console.error('Start error:', error);
            bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ / Xatolik");
        }
    });

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('message', async (msg) => {
        const { text, chat, from } = msg;
        const chatId = chat.id;
        const userId = from.id;

        if (!text || chat.type !== 'private') return;

        try {
            const user = await User.findOne({ telegramId: userId });
            if (!user) return;

            const lang = user.language;
            const texts = TEXTS[lang];


            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏


            // –í—ã–±–æ—Ä —è–∑—ã–∫–∞
            if (["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha"].includes(text)) {
                const language = text.includes('–†—É—Å—Å–∫–∏–π') ? 'ru' : 'uz';
                await User.updateOne({ telegramId: userId }, { language });

                // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
                bot.sendMessage(chatId, texts.languageSelected, {
                    reply_markup: {
                        keyboard: [["TRC20", "BEP20"]],
                        resize_keyboard: true
                    }
                });
            }

            // –í—ã–±–æ—Ä —Å–µ—Ç–∏
            else if (["TRC20", "BEP20"].includes(text)) {
                await User.updateOne({ telegramId: userId }, { network: text });
                const address = NETWORKS[text];

                bot.sendMessage(chatId, texts.networkSelected
                    .replace('{network}', text)
                    .replace('{address}', address), {
                    parse_mode: 'Markdown',
                    reply_markup: { remove_keyboard: true }
                });
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ TxID
            else if (user.network && !user.txId) {
                if (!isValidTxId(text)) {
                    return bot.sendMessage(chatId, texts.invalidTxId);
                }

                const existingTx = await User.findOne({ txId: text });
                if (existingTx) {
                    return bot.sendMessage(chatId, texts.txIdExists);
                }

                await User.updateOne({ telegramId: userId }, { txId: text });
                bot.sendMessage(chatId, texts.txIdValid);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ BNB –∞–¥—Ä–µ—Å–∞
            else if (user.txId && !user.bnbAddress) {
                if (!isValidBnbAddress(text)) {
                    return bot.sendMessage(chatId, texts.invalidBnbAddress);
                }

                await User.updateOne({ telegramId: userId }, { bnbAddress: text });
                const refLink = await getReferralLink(userId); // –ñ–¥–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Promise
                const refCount = user.referrals.length;
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
                const referralButtonText = lang === 'ru'
                    ? '/referrals - –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã'
                    : '/referrals - Referallarim';

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown
                const finalMessage = texts.success
                    .replace('{userId}', userId)
                    .replace('{refLink}', refLink) // –¢–µ–ø–µ—Ä—å refLink - —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ Promise
                    .replace('{refCount}', refCount)
                    .replace('{adminUsername}', ADMIN_USERNAME);

                bot.sendMessage(chatId, finalMessage, {
                    reply_markup: {
                        keyboard: [[{ text: referralButtonText }]],
                        resize_keyboard: true
                    }
                });
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /referrals

            else if (text.startsWith('/referrals')) {
                try {
                    const refCount = user.referrals.length;
                    const points = user.points;
                    const refLink = await getReferralLink(userId);

                    let message;
                    if (refCount > 0) {
                        message = lang === 'ru'
                            ? `üìä –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${refCount}\n‚≠ê –ë–∞–ª–ª—ã: ${points}`
                            : `üìä Referallaringiz:\n\nüë• Taklif qilganlar: ${refCount}\n‚≠ê Ballar: ${points}`;
                    } else {
                        message = lang === 'ru'
                            ? 'üîπ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!'
                            : 'üîπ Do‚Äòstlaringizni taklif qiling va bonus oling!';
                    }

                    const inviteButton = {
                        text: lang === 'ru' ? '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π ‚úâÔ∏è' : 'Do‚Äòstlarni taklif qilish ‚úâÔ∏è',
                        url: `https://t.me/share/url?url=${encodeURIComponent(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É! ${refLink}`)}`
                    };

                    await bot.sendMessage(chatId, message, {
                        reply_markup: {
                            inline_keyboard: [[inviteButton]]
                        }
                    });

                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –≤ /referrals:', error);
                    const errorText = lang === 'ru'
                        ? '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
                        : '‚ùå Referallarni yuklashda xatolik';
                    bot.sendMessage(chatId, errorText);
                }
            }

        } catch (error) {
            console.error('Message error:', error);
            bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ / Xatolik");
        }
    });
};